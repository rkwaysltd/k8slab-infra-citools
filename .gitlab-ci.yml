stages:
- build
- push
- test
- publish
- test-cleanup

variables:
  UPSTREAM_DOCKER_IMAGE: docker:19.03@sha256:b8a8caa37f283d18ca5a5066b7b79c95b401327061381df950712a585030043c
  UPSTREAM_K3S_IMAGE: rancher/k3s:v1.17.5-k3s1@sha256:3025ecfa3c7c3a262a97435cb7c9c182d22b93d014bac767019d65bdce586786
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: ${CI_PROJECT_DIR}/.docker
  DOCKER_HOST: tcp://docker-${BUILD_ARCH}:2376

.build:
  stage: build
  image: ${UPSTREAM_DOCKER_IMAGE}
  variables:
    QBEC_VERSION: v0.11.0
    QBEC_SHA256: fddf7fae84ba0bbdef343a86486a9bea406d644c5dc22e9724b0dd564534625d
    KUBECTL_VERSION: v1.18.3
    HELM_VERSION: v3.2.1
  script:
  - docker build -f Dockerfile
      --build-arg BUILD_ARCH
      --build-arg QBEC_VERSION
      --build-arg QBEC_SHA256
      --build-arg KUBECTL_VERSION
      --build-arg KUBECTL_SHA265
      --build-arg HELM_VERSION
      --build-arg HELM_SHA256
      ${PROJ_CI_DOCKERHUB_REPO:+--tag=${PROJ_CI_DOCKERHUB_REPO}:${CI_COMMIT_SHA}-${BUILD_ARCH}}
      ${CI_REGISTRY_IMAGE:+--tag=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${BUILD_ARCH}}
      .

.push:
  stage: push
  image: ${UPSTREAM_DOCKER_IMAGE}
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${BUILD_ARCH}

build-amd64:
  extends: .build
  variables:
    BUILD_ARCH: amd64
    KUBECTL_SHA265: 6fcf70aae5bc64870c358fac153cdfdc93f55d8bae010741ecce06bb14c083ea
    HELM_SHA256: 018f9908cb950701a5d59e757653a790c66d8eda288625dbb185354ca6f41f6b

push-amd64:
  extends: .push
  variables:
    BUILD_ARCH: amd64

build-arm64:
  extends: .build
  variables:
    BUILD_ARCH: arm64
    KUBECTL_SHA265: fc4479d1f7e58e6c8f40430a35f6b09b6f582909f69968e424fc20640ac45daf
    HELM_SHA256: 7200fb4582345f521d56daed56112d667fef25c48569f574fab3f9cb04c5b176

push-arm64:
  extends: .push
  variables:
    BUILD_ARCH: arm64

test-cleanup:
  stage: test-cleanup
  image:
    name: ${UPSTREAM_K3S_IMAGE}
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  when: always
  script:
  - kubectl delete pod,secret -l rkwaysltd.v1/prune-key-8sha-ref="${CI_PROJECT_PATH_SLUG:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?}"

test:
  stage: test
  image:
    name: ${UPSTREAM_K3S_IMAGE}
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
  - kubectl create secret docker-registry
      ${CI_PROJECT_NAME:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?}
      --docker-server=${CI_REGISTRY:?}
      --docker-username=${CI_REGISTRY_USER:?}
      --docker-password=${CI_REGISTRY_PASSWORD:?}
      --docker-email=${GITLAB_USER_EMAIL:?}
  # no jq in k3s image so no piping into kubectl apply
  - kubectl label secret
      ${CI_PROJECT_NAME:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?}
      rkwaysltd.v1/prune-key-8sha-ref="${CI_PROJECT_PATH_SLUG:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?}"
  - |
    run_test() {
      local arch overrides cmd
      arch=${1:?run_test architecture_name command}
      cmd=${2:?run_test architecture_name command}
      overrides="{ \"apiVersion\": \"v1\", \"spec\": { \"nodeSelector\": { \"kubernetes.io/arch\": \"$arch\" }, \"imagePullSecrets\": [ { \"name\": \"${CI_PROJECT_NAME:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?}\" } ] } }"
      kubectl run \
        -i \
        --restart=Never \
        -l rkwaysltd.v1/prune-key-8sha-ref="${CI_PROJECT_PATH_SLUG:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?}" \
        --limits=cpu=100m,memory=256Mi \
        --requests=cpu=100m,memory=256Mi \
        --overrides="$overrides" \
        --image=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${arch} \
        test-${CI_PROJECT_NAME:?}-$arch-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_NAME:?} \
        -- sh -c "$cmd"
    }
  - run_test amd64 /usr/local/bin/citools-show-versions.sh
  - run_test arm64 /usr/local/bin/citools-show-versions.sh

publish:
  stage: publish
  image: ${UPSTREAM_DOCKER_IMAGE}
  variables:
    # Use arm64 docker daemon for publishing
    BUILD_ARCH: arm64
  only:
  - master
  script:
  - docker login -u ${CI_REGISTRY_USER:?} -p ${CI_REGISTRY_PASSWORD:?} ${CI_REGISTRY:?}
  - docker pull ${CI_REGISTRY_IMAGE:?}:${CI_COMMIT_SHA:?}-amd64
  - docker pull ${CI_REGISTRY_IMAGE:?}:${CI_COMMIT_SHA:?}-arm64
  - docker manifest create ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} --amend ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-amd64 --amend ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-arm64
  - docker manifest push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  - docker login -u ${PROJ_CI_DOCKERHUB_USER:?please set in Gitlab CI} -p ${PROJ_CI_DOCKERHUB_TOKEN:?please set in Gitlab CI} ${PROJ_CI_DOCKERHUB_REPO:?please set in Gitlab CI}
  - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} ${PROJ_CI_DOCKERHUB_REPO:?}:latest
  - docker push ${PROJ_CI_DOCKERHUB_REPO:?}:latest

before_script:
- |
  mkdir .docker
  echo "${PROJ_CI_DOCKER_CA_CERT:?please set variable in Gitlab CI settings}" > .docker/ca.pem
  echo "${PROJ_CI_DOCKER_CLIENT_CERT:?please set variable in Gitlab CI settings}" > .docker/cert.pem
  echo "${PROJ_CI_DOCKER_CLIENT_KEY:?please set variable in Gitlab CI settings}" > .docker/key.pem
  mkdir -p "${HOME:?}/.docker"
  echo '{ "experimental": "enabled" }' > "$HOME/.docker/config.json"
