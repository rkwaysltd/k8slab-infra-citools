# Run on 'infra' runners
default:
  tags:
  - infra

stages:
- build
- push
- test
- test-cleanup
- publish

variables:
  UPSTREAM_DOCKER_IMAGE: docker:20.10.7@sha256:bfc499cef26daa22da31b76be1752813a6921ee1fa1dd1f56d4fdf19c701d332
  UPSTREAM_K3S_IMAGE: rancher/k3s:v1.21.2-k3s1@sha256:a467df2b1b49040d18fdd4925a25d36efb891c96fbf682154a55aed3157ea66f
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: ${CI_PROJECT_DIR}/.docker
  DOCKER_HOST: tcp://docker-${BUILD_ARCH}.ci-docker:2376

.build:
  stage: build
  image: ${UPSTREAM_DOCKER_IMAGE}
  variables:
    QBEC_VERSION: v0.14.3
    KUBECTL_VERSION: v1.21.2
    HELM_VERSION: v3.6.1
    JB_VERSION: v0.4.0
  script:
  - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  # Workaround for https://github.com/cloudnativelabs/kube-router/issues/873
  - "for i in 0 1 2 3 4 5 6 7 8 9; do docker version >/dev/null 2>&1 && break || { echo NetPols sometimes are slow to catch. Retrying.; sleep 5; }; done"
  - docker build -f Dockerfile
      --build-arg BUILD_DATE
      --build-arg REVISION=${CI_COMMIT_SHA:?}
      --build-arg BUILD_ARCH
      --build-arg QBEC_VERSION
      --build-arg QBEC_SHA256
      --build-arg KUBECTL_VERSION
      --build-arg KUBECTL_SHA265
      --build-arg HELM_VERSION
      --build-arg HELM_SHA256
      --build-arg JB_VERSION
      --build-arg JB_SHA256
      ${PROJ_CI_DOCKERHUB_REPO:+--tag=${PROJ_CI_DOCKERHUB_REPO}:${CI_COMMIT_SHA}-${BUILD_ARCH}}
      ${CI_REGISTRY_IMAGE:+--tag=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${BUILD_ARCH}}
      .

.push:
  stage: push
  image: ${UPSTREAM_DOCKER_IMAGE}
  script:
  # Workaround for https://github.com/cloudnativelabs/kube-router/issues/873
  - "for i in 0 1 2 3 4 5 6 7 8 9; do docker version >/dev/null 2>&1 && break || { echo NetPols sometimes are slow to catch. Retrying.; sleep 5; }; done"
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${BUILD_ARCH}

build-amd64:
  extends: .build
  variables:
    BUILD_ARCH: amd64
    QBEC_SHA256: 33a61c83ef14e1275c47660bb0f57d26b48d7432fcf2364383db0cad9c370bec
    KUBECTL_SHA265: 55b982527d76934c2f119e70bf0d69831d3af4985f72bb87cd4924b1c7d528da
    HELM_SHA256: c64f2c7b1d00c5328b164cea4bbd5e0752c103193037173c9eadea9d6a57eddb
    JB_SHA256: 433edab5554a88a0371e11e93080408b225d41c31decf321c02b50d2e44993ce

push-amd64:
  extends: .push
  variables:
    BUILD_ARCH: amd64

build-arm64:
  extends: .build
  variables:
    BUILD_ARCH: arm64
    QBEC_SHA256: 5e9d3fdcf4e937f1e2e6431676dc4fbaa73d5d3dc03844e6be36aed510e35c96
    KUBECTL_SHA265: 5753051ed464d0f1af05a3ca351577ba5680a332d5b2fa7738f287c8a40d81cf
    HELM_SHA256: a044b370d1b6e65b7d8d0aa7da4d11e4f406ec5b56af3a2f5bec09eb00c290fc
    JB_SHA256: 4659df99f6e2f438811389571856c58060bd946885edc466ae982d14d806275b

push-arm64:
  extends: .push
  variables:
    BUILD_ARCH: arm64

test-cleanup:
  stage: test-cleanup
  image:
    name: ${UPSTREAM_K3S_IMAGE}
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  when: always
  script:
  - kubectl delete pod,secret -l rkways.com/prune-key-8sha-ref="${CI_PROJECT_PATH_SLUG:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_SLUG:?}"

test:
  stage: test
  image:
    name: ${UPSTREAM_K3S_IMAGE}
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
  - kubectl create secret docker-registry
      ${CI_PROJECT_NAME:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_SLUG:?}
      --docker-server=${CI_REGISTRY:?}
      --docker-username=${CI_REGISTRY_USER:?}
      --docker-password=${CI_REGISTRY_PASSWORD:?}
      --docker-email=${GITLAB_USER_EMAIL:?}
      --dry-run
      -o yaml
    | kubectl label --local -f -
        rkways.com/prune-key-8sha-ref="${CI_PROJECT_PATH_SLUG:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_SLUG:?}"
        -o yaml
    | kubectl apply -f -
  - |
    run_test() {
      local arch overrides cmd
      arch=${1:?run_test architecture_name command}
      cmd=${2:?run_test architecture_name command}
      overrides="{ \"apiVersion\": \"v1\", \"spec\": { \"nodeSelector\": { \"kubernetes.io/arch\": \"$arch\" }, \"imagePullSecrets\": [ { \"name\": \"${CI_PROJECT_NAME:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_SLUG:?}\" } ] } }"
      kubectl run \
        -i \
        --restart=Never \
        -l rkways.com/prune-key-8sha-ref="${CI_PROJECT_PATH_SLUG:?}-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_SLUG:?}" \
        --limits=cpu=100m,memory=256Mi \
        --requests=cpu=100m,memory=256Mi \
        --overrides="$overrides" \
        --image=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${arch} \
        test-${CI_PROJECT_NAME:?}-$arch-${CI_COMMIT_SHORT_SHA:?}-${CI_COMMIT_REF_SLUG:?} \
        -- sh -c "$cmd"
    }
  - run_test amd64 /usr/local/bin/citools-show-versions.sh
  - run_test arm64 /usr/local/bin/citools-show-versions.sh

publish:
  stage: publish
  image: ${UPSTREAM_DOCKER_IMAGE}
  variables:
    # Use arm64 docker daemon for publishing
    BUILD_ARCH: arm64
  only:
  - master
  - tags
  script:
  # Workaround for https://github.com/cloudnativelabs/kube-router/issues/873
  - "for i in 0 1 2 3 4 5 6 7 8 9; do docker version >/dev/null 2>&1 && break || { echo NetPols sometimes are slow to catch. Retrying.; sleep 5; }; done"
  - docker login -u ${CI_REGISTRY_USER:?} -p ${CI_REGISTRY_PASSWORD:?} ${CI_REGISTRY:?}
  - docker pull ${CI_REGISTRY_IMAGE:?}:${CI_COMMIT_SHA:?}-amd64
  - docker pull ${CI_REGISTRY_IMAGE:?}:${CI_COMMIT_SHA:?}-arm64
  - docker manifest create ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} --amend ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-amd64 --amend ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-arm64
  - docker manifest push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  - docker login -u ${PROJ_CI_DOCKERHUB_USER:?please set in Gitlab CI} -p ${PROJ_CI_DOCKERHUB_TOKEN:?please set in Gitlab CI}
  - |
    dockerhub_multi_tag() {
      local t
      t=${1:?dockerhub_multi_tag tag_name}
      docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-amd64 ${PROJ_CI_DOCKERHUB_REPO:?}:${t}-amd64
      docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-arm64 ${PROJ_CI_DOCKERHUB_REPO:?}:${t}-arm64
    }
    dockerhub_multi_push() {
      local t
      t=${1:?dockerhub_multi_push tag_name}
      docker push ${PROJ_CI_DOCKERHUB_REPO:?}:${t}-amd64
      docker push ${PROJ_CI_DOCKERHUB_REPO:?}:${t}-arm64
    }
    dockerhub_multi_manifest_create() {
      local t
      t=${1:?dockerhub_multi_manifest_create tag_name}
      docker manifest create ${PROJ_CI_DOCKERHUB_REPO:?}:${t} --amend ${PROJ_CI_DOCKERHUB_REPO:?}:${t}-amd64 --amend ${PROJ_CI_DOCKERHUB_REPO:?}:${t}-arm64
    }
  - dockerhub_multi_tag latest
  - dockerhub_multi_push latest
  - dockerhub_multi_manifest_create latest
  - docker manifest push ${PROJ_CI_DOCKERHUB_REPO:?}:latest
  - 'test "${CI_COMMIT_TAG:-}" = "" || dockerhub_multi_tag $CI_COMMIT_TAG'
  - 'test "${CI_COMMIT_TAG:-}" = "" || dockerhub_multi_push $CI_COMMIT_TAG'
  - 'test "${CI_COMMIT_TAG:-}" = "" || dockerhub_multi_manifest_create $CI_COMMIT_TAG'
  - 'test "${CI_COMMIT_TAG:-}" = "" || docker manifest push ${PROJ_CI_DOCKERHUB_REPO:?}:$CI_COMMIT_TAG'

before_script:
- |
  mkdir .docker
  echo "${PROJ_CI_DOCKER_CA_CERT:?please set variable in Gitlab CI settings}" > .docker/ca.pem
  echo "${PROJ_CI_DOCKER_CLIENT_CERT:?please set variable in Gitlab CI settings}" > .docker/cert.pem
  echo "${PROJ_CI_DOCKER_CLIENT_KEY:?please set variable in Gitlab CI settings}" > .docker/key.pem
  mkdir -p "${HOME:?}/.docker"
  echo '{ "experimental": "enabled" }' > "$HOME/.docker/config.json"
